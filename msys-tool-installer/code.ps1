function InstallMsysTool {
  $answer = Read-Host "This will modify the `$PROFILE file. Continue? (Y/N)"
  if ($answer -eq "Y" -or $answer -eq "y") {
    Write-Host "Proceeding..."
  }
  elseif ($answer -eq "N" -or $answer -eq "n") {
    Write-Host "Exiting."
    return
  }
  else {
    Write-Host "ERROR: Invalid input."
    return
  }

  $answer = Read-Host "Do you want to completely overwrite the `$PROFILE file, or select 'N' to prepend the content to it? (Y/N)"
  if ($answer -eq "Y" -or $answer -eq "y" -or $answer -eq "N" -or $answer -eq "n") {
    if (-not (Test-Path (Split-Path $PROFILE))) {
      New-Item -Path (Split-Path $PROFILE) -ItemType Directory -Force | Out-Null
    }

    if ($answer -eq "Y" -or $answer -eq "y") {
      Write-Host "Proceeding overwrite..."
      Set-Content -Path $PROFILE -Value "" -NoNewline
    }
    else {
      Write-Host "Proceeding prepend..."
    }

    Set-Content -Path $PROFILE -Value ((Get-Content $PROFILE), @(
      'function msys {'
      '  [CmdletBinding(PositionalBinding=$false)]'
      '  param ('
      '    [switch]$unset,'
      '    [string]$set,'
      '    [switch]$get,'
      '    [switch]$path,'
      '    [switch]$admin,'
      '    [switch]$h,'
      '    [switch]$restart'
      '  )'
      ''
      '  # msys -h ===================================================================='
      ''
      '  if ($h) {'
      '    Echo "msys - MSYS Environment Setting Tool"'
      '    Echo ""'
      '    Echo "Usage: msys [no-option-mode] | (-get | -set <value> | -unset) [-path] [-admin] | -h | -restart"'
      '    Echo ""'
      '    Echo "Options:"'
      '    Echo "  msys                    : Open MSYS shell."'
      '    Echo "  msys -get -path         : Show MSYS path data."'
      '    Echo "  msys -set <value> -path : Modify MSYS path data."'
      '    Echo "  msys -unset -path       : Clear MSYS path data."'
      '    Echo "  msys -get               : Show MSYS env variable."'
      '    Echo "  msys -set <value>       : Modify MSYS env variable."'
      '    Echo "  msys -unset             : Clear MSYS env variable."'
      '    Echo "  msys -h                 : Show help information."'
      '    Echo "  msys -restart           : Restart Powershell."'
      '    Echo "       -admin             : as admin."'
      '    Echo ""'
      '    Echo "Caution:"'
      '    Echo "  * This tool requires MSYS2. please install MSYS2 first"'
      '    Echo "  * This tool requires msysPath(like C:\...\msys64\). please use -get -path, -set -path option first"'
      '    Echo "  * The file `"msys2_shell.cmd`" must exist in the msysPath."'
      '    Echo "  * Please set no more than one env variable."'
      '    return'
      '  }'
      ''
      '  # msys -restart =============================================================='
      ''
      '  if ($restart) {'
      '    if ($admin) { Start-Process powershell -Verb RunAs }'
      '    else { Start-Process powershell }'
      '    Exit'
      '  }'
      ''
      '  if ($path) {'
      ''
      '    # msys -unset -path =========================================================='
      ''
      '    if ($unset) {'
      '      $pathlines = Select-String -Path $PROFILE -Pattern "msysPath = `"" | ForEach-Object { $_.LineNumber }'
      '      $lines = Get-Content $PROFILE'
      '      $newLines = $lines | Where-Object { ($lines.IndexOf($_) + 1) -notin $pathlines }'
      '      Set-Content $PROFILE $newLines'
      ''
      '      msys -restart'
      '    }'
      ''
      '    # msys -set -path ============================================================'
      ''
      '    if ($set) {'
      '      if (Test-Path -Path ($set + "\msys2_shell.cmd")) {'
      '        $set += "\";'
      '        Echo $set'
      '      }'
      '      elseif (!(Test-Path -Path ($set + "msys2_shell.cmd"))) {'
      '        Echo "ERROR: `"$set`" Invalid path."'
      '        return'
      '      }'
      ''
      '      $pathlines = Select-String -Path $PROFILE -Pattern "msysPath = `"" | ForEach-Object { $_.LineNumber }'
      '      $lines = Get-Content $PROFILE'
      '      $newLines = $lines | Where-Object { ($lines.IndexOf($_) + 1) -notin $pathlines }'
      '      Set-Content $PROFILE ("`$msysPath = `"$set`"", $newLines)'
      ''
      '      msys -restart'
      '    }'
      ''
      '    # msys -get -path ============================================================'
      ''
      '    if ($get) {'
      '      if ($msysPath) { Write-Host "- : `$msysPath = `"$msysPath`"" -ForegroundColor Green }'
      '      else { Write-Host "- : `$msysPath => UNSET" -ForegroundColor Red }'
      ''
      '      $pathlines = Select-String -Path $PROFILE -Pattern "msysPath = `"" | ForEach-Object { $_.LineNumber }'
      '      $lines = Get-Content $PROFILE'
      '      foreach ($pathline in $pathlines) { Echo ("" + $pathline + " : " + $lines[$pathline - 1]) }'
      '      return'
      '    }'
      '  }'
      ''
      '  # msys msysPath existence check =============================================='
      ''
      '  if (!$msysPath) {'
      '    Echo "ERROR: msys requires msysPath(like C:\...\msys64\). please use -get -path, -set -path option first"'
      '    return'
      '  }'
      ''
      '  # msys msysPath integrity check =============================================='
      ''
      '  if (!(Test-Path -Path ($msysPath + "msys2_shell.cmd"))) {'
      '    Echo "ERROR: `"$msysPath`" Invalid path."'
      '    return'
      '  }'
      ''
      '  # msys admin check ==========================================================='
      ''
      '  if ($admin -and (!([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))) {'
      '    Echo "ERROR: -admin option requires that you run as an administrator."'
      '    return'
      '  }'
      ''
      '  # msys -unset ================================================================'
      ''
      '  if ($unset) {'
      '    if ($admin) { [System.Environment]::SetEnvironmentVariable("Path", ([System.Environment]::GetEnvironmentVariable("Path", "Machine") -replace ($msysPath.Replace("\","\\") + "[^;]*;"), ""), "Machine") }'
      '    else { [System.Environment]::SetEnvironmentVariable("Path", ([System.Environment]::GetEnvironmentVariable("Path", "User") -replace ($msysPath.Replace("\","\\") + "[^;]*;"), ""), "User") }'
      '    return'
      '  }'
      ''
      '  # msys -set =================================================================='
      ''
      '  if ($set) {'
      '    if ($admin) {'
      '      $machPath = [System.Environment]::GetEnvironmentVariable("Path", "Machine")'
      '      switch ($set) {'
      '        UCRT64 { [System.Environment]::SetEnvironmentVariable("Path", ($machPath -replace ($msysPath.Replace("\","\\") + "[^;]*;"), "") + $msysPath + "ucrt64\bin;", "Machine") }'
      '        MINGW64 { [System.Environment]::SetEnvironmentVariable("Path", ($machPath -replace ($msysPath.Replace("\","\\") + "[^;]*;"), "") + $msysPath + "mingw64\bin;", "Machine") }'
      '        CLANG64 { [System.Environment]::SetEnvironmentVariable("Path", ($machPath -replace ($msysPath.Replace("\","\\") + "[^;]*;"), "") + $msysPath + "clang64\bin;", "Machine") }'
      '        MSYS2 { [System.Environment]::SetEnvironmentVariable("Path", ($machPath -replace ($msysPath.Replace("\","\\") + "[^;]*;"), "") + $msysPath + "usr\bin;", "Machine") }'
      '        default { Echo "ERROR: `"$set`" Invalid argument." }'
      '      }'
      '    }'
      '    else {'
      '      $userPath = [System.Environment]::GetEnvironmentVariable("Path", "User")'
      '      switch ($set) {'
      '        UCRT64 { [System.Environment]::SetEnvironmentVariable("Path", ($userPath -replace ($msysPath.Replace("\","\\") + "[^;]*;"), "") + $msysPath + "ucrt64\bin;", "User") }'
      '        MINGW64 { [System.Environment]::SetEnvironmentVariable("Path", ($userPath -replace ($msysPath.Replace("\","\\") + "[^;]*;"), "") + $msysPath + "mingw64\bin;", "User") }'
      '        CLANG64 { [System.Environment]::SetEnvironmentVariable("Path", ($userPath -replace ($msysPath.Replace("\","\\") + "[^;]*;"), "") + $msysPath + "clang64\bin;", "User") }'
      '        MSYS2 { [System.Environment]::SetEnvironmentVariable("Path", ($userPath -replace ($msysPath.Replace("\","\\") + "[^;]*;"), "") + $msysPath + "usr\bin;", "User") }'
      '        default { Echo "ERROR: `"$set`" Invalid argument." }'
      '      }'
      '    }'
      '    return;'
      '  }'
      ''
      '  # msys -get =================================================================='
      ''
      '  if ($get) {'
      '    $userNum = -1'
      '    $machNum = -1'
      '    $userPath = [System.Environment]::GetEnvironmentVariable("Path", "User")'
      '    $machPath = [System.Environment]::GetEnvironmentVariable("Path", "Machine")'
      ''
      '    if ($userPath -like ("*" + $msysPath + "ucrt64\bin*")) { $userNum *= -1; }'
      '    if ($userPath -like ("*" + $msysPath + "mingw64\bin*")) { $userNum *= -2; }'
      '    if ($userPath -like ("*" + $msysPath + "clang64\bin*")) { $userNum *= -3; }'
      '    if ($userPath -like ("*" + $msysPath + "usr\bin*")) { $userNum *= -4; }'
      ''
      '    if ($machPath -like ("*" + $msysPath + "ucrt64\bin*")) { $machNum *= -1; }'
      '    if ($machPath -like ("*" + $msysPath + "mingw64\bin*")) { $machNum *= -2; }'
      '    if ($machPath -like ("*" + $msysPath + "clang64\bin*")) { $machNum *= -3; }'
      '    if ($machPath -like ("*" + $msysPath + "usr\bin*")) { $machNum *= -4; }'
      ''
      '    Write-Host " * UCRT64  " -ForegroundColor Green -NoNewline'
      '    if ($userNum -eq 1) { Write-Host " <== USER" -NoNewline } else { Write-Host "         " -NoNewline }'
      '    if ($machNum -eq 1) { Write-Host " <== MACHINE" } else { Write-Host "            " }'
      ''
      '    Write-Host " * MINGW64 " -ForegroundColor Green -NoNewline'
      '    if ($userNum -eq 2) { Write-Host " <== USER" -NoNewline } else { Write-Host "         " -NoNewline }'
      '    if ($machNum -eq 2) { Write-Host " <== MACHINE" } else { Write-Host "            " }'
      ''
      '    Write-Host " * CLANG64 " -ForegroundColor Green -NoNewline'
      '    if ($userNum -eq 3) { Write-Host " <== USER" -NoNewline } else { Write-Host "         " -NoNewline }'
      '    if ($machNum -eq 3) { Write-Host " <== MACHINE" } else { Write-Host "            " }'
      ''
      '    Write-Host " * MSYS2   " -ForegroundColor Green -NoNewline'
      '    if ($userNum -eq 4) { Write-Host " <== USER" -NoNewline } else { Write-Host "         " -NoNewline }'
      '    if ($machNum -eq 4) { Write-Host " <== MACHINE" } else { Write-Host "            " }'
      ''
      '    Write-Host " * UNSET   " -ForegroundColor Red -NoNewline'
      '    if ($userNum -eq -1) { Write-Host " <== USER" -NoNewline } else { Write-Host "         " -NoNewline }'
      '    if ($machNum -eq -1) { Write-Host " <== MACHINE" } else { Write-Host "            " }'
      ''
      '    Write-Host " * CONFLICT" -ForegroundColor Red -NoNewline'
      '    if (($userNum -le -2) -or ($userNum -ge 5)) { Write-Host " <== USER" -NoNewline } else { Write-Host "         " -NoNewline }'
      '    if (($machNum -le -2) -or ($machNum -ge 5)) { Write-Host " <== MACHINE" } else { Write-Host "            " }'
      ''
      '    return;'
      '  }'
      ''
      '  # msys ======================================================================='
      ''
      '  if ($admin) {'
      '    $machNum = -1'
      '    $machPath = [System.Environment]::GetEnvironmentVariable("Path", "Machine")'
      '    if ($machPath -like ("*" + $msysPath + "ucrt64\bin*")) { $machNum *= -1; }'
      '    if ($machPath -like ("*" + $msysPath + "mingw64\bin*")) { $machNum *= -2; }'
      '    if ($machPath -like ("*" + $msysPath + "clang64\bin*")) { $machNum *= -3; }'
      '    if ($machPath -like ("*" + $msysPath + "usr\bin*")) { $machNum *= -4; }'
      ''
      '    switch ($machNum) {'
      '      -1 { Echo "ERROR: Path missing" }'
      '      1 { &($msysPath + "msys2_shell.cmd") -defterm -here -no-start -ucrt64 }'
      '      2 { &($msysPath + "msys2_shell.cmd") -defterm -here -no-start -mingw64 }'
      '      3 { &($msysPath + "msys2_shell.cmd") -defterm -here -no-start -clang64 }'
      '      4 { &($msysPath + "msys2_shell.cmd") -defterm -here -no-start -msys }'
      '      default { Echo "ERROR: Path conflict" }'
      '    }'
      '  }'
      '  else {'
      '    $userNum = -1'
      '    $userPath = [System.Environment]::GetEnvironmentVariable("Path", "User")'
      '    if ($userPath -like ("*" + $msysPath + "ucrt64\bin*")) { $userNum *= -1; }'
      '    if ($userPath -like ("*" + $msysPath + "mingw64\bin*")) { $userNum *= -2; }'
      '    if ($userPath -like ("*" + $msysPath + "clang64\bin*")) { $userNum *= -3; }'
      '    if ($userPath -like ("*" + $msysPath + "usr\bin*")) { $userNum *= -4; }'
      ''
      '    switch ($userNum) {'
      '      -1 { Echo "ERROR: Path missing" }'
      '      1 { &($msysPath + "msys2_shell.cmd") -defterm -here -no-start -ucrt64 }'
      '      2 { &($msysPath + "msys2_shell.cmd") -defterm -here -no-start -mingw64 }'
      '      3 { &($msysPath + "msys2_shell.cmd") -defterm -here -no-start -clang64 }'
      '      4 { &($msysPath + "msys2_shell.cmd") -defterm -here -no-start -msys }'
      '      default { Echo "ERROR: Path conflict" }'
      '    }'
      '  }'
      '}'
    ))
  }
  else {
    Write-Host "ERROR: Invalid input."
    return
  }
}

InstallMsysTool

Write-Host "The task is finished. Press Enter to close the window..."
Read-Host